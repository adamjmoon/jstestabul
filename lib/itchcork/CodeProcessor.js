define(['./ToSource', 'lib/when', 'require', 'lib/js2coffee', "lib/ace/ext/static_highlight", "lib/ace/lib/dom", "lib/ace/theme/pastel_on_dark", "lib/ace/mode/coffee", "lib/ace/mode/javascript"]
    , function (ToSource, when, require) {

        function CodeProcessor() {
            var self = this;
            this.require = require;
            this.codeHighlighter = require("lib/ace/ext/static_highlight");
            this.selectedCodeTheme = new ko.observable("pastel_on_dark");
            this.themeOptions = [];
            this.currentTheme = new ko.observable();
            this.dom = require("lib/ace/lib/dom");
            this.deferred = undefined;
            var aceCoffeeMode = (require("lib/ace/mode/coffee")).Mode;
            this.coffeeMode = new aceCoffeeMode();
            var aceJavscriptMode = (require("lib/ace/mode/javascript")).Mode;
            this.javascriptMode = new aceJavscriptMode();
            this.properties = [];

            this.setCurrentTheme = function(){
                console.log('setting current theme to : ' + "lib/ace/theme/" + self.selectedCodeTheme());
                var theme = self.require("lib/ace/theme/" + self.selectedCodeTheme());
                if(theme)
                    self.currentTheme(theme);

            };

            ko.computed(function () {
                if (self.selectedCodeTheme()) {
                    console.log(self.selectedCodeTheme());
                    self.setCurrentTheme();
                }
            }).extend({
                    throttle: 1000
                });
        }

        CodeProcessor.prototype.buildPropertyList = function (context, proto, done) {
            var jsStr = '', coffeeStr = '', prop, property;
            var _this = this;
            Object.keys(context).forEach(function (prop) {
                if (context[prop] instanceof Function) {
                    jsStr = context[prop].toString();
                    try {
                        coffeeStr = Js2coffee.build(jsStr);
                        property = { name: (proto ? 'prototype.' : '') + prop + '()', jsStr: _this.highlight(jsStr, _this.javascriptMode), coffeeStr: _this.highlight(coffeeStr, _this.coffeeMode)};
                        _this.properties.push(property);
                    } catch (err) {
                        property = { name: (proto ? 'prototype.' : '') + prop + '()', jsStr: _this.highlight(jsStr, _this.javascriptMode), coffeeStr: ''};
                        _this.properties.push(property);
                    }

                } else {
                    var objSrc = ToSource(context[prop]);
                    property = {  name: (proto ? 'prototype.' : '') + prop, jsStr: _this.highlight(objSrc, _this.javascriptMode), coffeeStr: _this.highlight(Js2coffee.build(prop + ' = ' + objSrc), _this.coffeeMode)};
                    _this.properties.push(property);
                }

            });

            if (!proto && Object.keys(context.__proto__).length > 0) {
                this.buildPropertyList(context.__proto__, true, done);
            }
            else {
                done(_this.properties);
            }

        };

        CodeProcessor.prototype.highlight = function (code, mode) {
            var highlighted = this.codeHighlighter.render(code, mode, this.currentTheme());

            this.dom.importCssString(highlighted.css, "ace_highlight");

            return highlighted.html;
        };


        CodeProcessor.prototype.process = function (codeModel) {
            this.deferred = when.defer();
            var _this = this;

            this.properties = [];
            this.buildPropertyList(codeModel.jsContext, false, function (properties) {

                var buildCoffee = function () {
                    //build coffee source
                    $.get('_src/' + codeModel.moduleName + '.coffee',function (coffeeStr) {
                        codeModel.coffeeSourceStr(_this.highlight(coffeeStr.trim(), _this.coffeeMode));
                        codeModel.processed(true);
                        _this.deferred.resolve(codeModel);

                    }).fail(function () {
                            codeModel.coffeeSourceStr(_this.highlight(Js2coffee.build(codeModel.jsSourceStr().trim()), _this.coffeeMode));
                            codeModel.processed(true);
                            _this.deferred.resolve(codeModel);
                        });
                };

                codeModel.properties(properties);
                $.get('_src/' + codeModel.moduleName + '.js',function (jsStr) {
                    jsStr = jsStr.replace('\/\/ Generated by CoffeeScript 1.6.3\n', '');
                    codeModel.jsSourceStr(_this.highlight(jsStr.trim(), _this.javascriptMode));
                    buildCoffee();

                }).fail(function () {
                        codeModel.jsSourceStr(_this.highlight(ToSource(codeModel.jsFunctionOrObject), _this.javascriptMode));
                        buildCoffee();
                    });


            });


            return this.deferred.promise;
        };

        return CodeProcessor;
    });