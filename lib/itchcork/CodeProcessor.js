define(['./ToSource', 'lib/when', 'require', "lib/ace/ext/static_highlight", "lib/ace/lib/dom", "lib/ace/theme/solarized_dark", "lib/ace/theme/pastel_on_dark", "lib/ace/mode/coffee", "lib/ace/mode/javascript"]
    , function (ToSource, when, require) {

        function CodeProcessor() {
            this.currentTheme = new ko.observable();
            this.selectedCodeTheme = new ko.observable("solarized_dark");
            this.setCurrentTheme = (function (_this) {
                return function () {
                    console.log('setting current theme to : ' + "lib/ace/theme/" + _this.selectedCodeTheme());
                    var theme = require("lib/ace/theme/" + _this.selectedCodeTheme());
                    if (theme)
                        _this.currentTheme(theme);

                };
            })(this);

            this.setCurrentTheme();

            this.codeHighlighter = require("lib/ace/ext/static_highlight");

            this.themeOptions = [];


            this.dom = require("lib/ace/lib/dom");
            var aceCoffeeMode = (require("lib/ace/mode/coffee")).Mode;
            this.coffeeMode = new aceCoffeeMode();
            var aceJavscriptMode = (require("lib/ace/mode/javascript")).Mode;
            this.javascriptMode = new aceJavscriptMode();


            this.buildPropertyList = (function (_this) {
                return function (context, codeModel, proto, done) {

                    var jsStr = '', coffeeStr = '', prop, property;
                    try {
                        if (context && typeof context !== "string") {

                            Object.keys(context).forEach(function (prop) {
                                if (prop !== "__moduleId__") {
                                    if (context[prop] instanceof Function) {
                                        jsStr = context[prop].toString();
                                        try {
                                            coffeeStr = Js2coffee.build(jsStr);
                                            property = { name: (proto ? 'prototype.' : '') + prop + '()', jsStr: _this.highlight(jsStr, _this.javascriptMode), coffeeStr: _this.highlight(coffeeStr, _this.coffeeMode)};
                                            codeModel.properties.push(property);
                                        } catch (err) {
                                            property = { name: (proto ? 'prototype.' : '') + prop + '()', jsStr: _this.highlight(jsStr, _this.javascriptMode), coffeeStr: ''};
                                            codeModel.properties.push(property);
                                        }

                                    } else {
                                        var objSrc = ToSource(context[prop]);
                                        objSrc = prop + ' = ' + objSrc
                                        property = {  name: (proto ? 'prototype.' : '') + prop, jsStr: _this.highlight(objSrc.replace(prop + ' = ', ''), _this.javascriptMode), coffeeStr: _this.highlight(Js2coffee.build(objSrc).replace(prop + ' = ', '').replace(prop + ' =\n', ''), _this.coffeeMode)};
                                        codeModel.properties.push(property);
                                    }
                                }
                            });

                            if (!proto && context.prototype) {
                                this.buildPropertyList(context.prototype, codeModel, true, done);
                            }
                            else {
                                done();
                            }
                        }
                    }
                    catch (ex) {
                        done();
                    }

                }
            })(this);


            this.highlight = (function (_this) {
                return function (code, mode) {
                    console.log(this);
                    var highlighted = _this.codeHighlighter.render(code, mode, _this.currentTheme());

                    _this.dom.importCssString(highlighted.css, "ace_highlight");

                    return highlighted.html;
                };
            })(this);

            this.process = (function (_this) {
                return function (codeModel) {
                    var deferred = when.defer();

                    _this.buildPropertyList(codeModel.jsFunctionOrObject(), codeModel, false, function () {


                        $.get('_src/' + codeModel.moduleName() + '.js',function (jsStr) {
                            jsStr = jsStr.replace('\/\/ Generated by CoffeeScript 1.6.3\n', '');
                            codeModel.jsSourceStr(jsStr.trim());
                            deferred.resolve(codeModel);

                        }).fail(function () {
                                codeModel.jsSourceStr(ToSource(context));
                                deferred.resolve(codeModel);
                            });


                    });

                    return deferred.promise;
                };
            })(this);
        }


        return CodeProcessor;
    })
;