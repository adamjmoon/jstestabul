define(['lib/js2coffee/js2coffee', 'lib/js2coffee/coffee-script', 'lib/js2coffee/theme-github', 'lib/js2coffee/token_tooltip'], function () {

    var js2coffeeEditor = function () {
        var js2coffeeOptions = {};
        var editorCoffee = undefined;
        var editorJS = undefined;
        var editorJS_Session = undefined;
        var editorCoffee_Session = undefined;
        var editMode = undefined;
        this.model = undefined;

        var compileToJavaScript = function () {
            try {
                
                var input = editorCoffee.getSession().getDocument().getValue();
                var jsOutput = CoffeeScript.compile(input, {bare: true});

                editorJS_Session.getDocument().setValue(jsOutput);

                if (document.querySelector(".infobox-content")) {
                    document.querySelector(".infobox-content").innerText = "";
                }
                if (document.querySelector("#infobox"))
                    document.querySelector("#infobox").style.display = "none";

                editorJS_Session.setScrollTop(0);
                editorJS_Session.setScrollLeft(0);
                editorCoffee_Session.setScrollTop(0);
                editorCoffee_Session.setScrollLeft(0);
            } catch (err) {
                console.log(err.message);
                console.log(err.stack);
                if (document.querySelector(".infobox-content"))
                    document.querySelector(".infobox-content").innerText = err.message;

                if (document.querySelector("#infobox"))
                    document.querySelector("#infobox").style.display = "block";
            }
        }

        var compileToCoffee = function () {
            try {
                
                var input = editorJS.getSession().getDocument().getValue();
                var coffeeOutput = Js2coffee.build(input, js2coffeeOptions);
                coffeeOutput = coffeeOutput.replace(/(# Generated by CoffeeScript [0-9].[0-9].[0-9]\n)(.*?)/g,'$2')
                editorCoffee_Session.getDocument().setValue(coffeeOutput);

                if (document.querySelector(".infobox-content")) {
                    document.querySelector(".infobox-content").innerText = "";
                }
                if (document.querySelector("#infobox"))
                    document.querySelector("#infobox").style.display = "none";

                editorCoffee_Session.setScrollTop(0);
                editorCoffee_Session.setScrollLeft(0);
                editorJS_Session.setScrollTop(0);
                editorJS_Session.setScrollLeft(0);
            } catch (err) {
                console.log(err.message);
                console.log(err.stack);
                document.querySelector(".infobox-content").innerText = err.message;
                document.querySelector("#infobox").style.display = "block";
            }
        };

        this.saveCoffee = (function (_this) {
            return function () {
                var moduleInfo = {
                    name: _this.model.moduleName(),
                    ext: ".coffee",
                    code: editorCoffee.getSession().getDocument().getValue()
                };
                $.post("/saveModule", {
                    moduleInfo: JSON.stringify(moduleInfo)
                }, function () {

                });
            };

        })(this);


        this.update = (function (_this) {
            return function (updatedModel) {
                _this.model = updatedModel;
                if (updatedModel.coffeeSourceStr().length > 0) {
                    editorCoffee_Session.getDocument().setValue(updatedModel.coffeeSourceStr());
                } else {
                    editorJS_Session.getDocument().setValue(updatedModel.jsSourceStr());
                    //  compileToCoffee();
                }
            };
        })(this);

        this.init = (function (_this) {
            return function (model) {

                js2coffeeOptions.show_src_lineno = false;

                var TokenTooltip = ace.require("kitchen-sink/token_tooltip").TokenTooltip;
                ace.require("ace/ext/language_tools");

                editorCoffee = ace.edit("editorCoffee");
                editorCoffee.setOptions({
                    enableBasicAutocompletion: true
                });
                editorCoffee_Session = editorCoffee.getSession();
                editorCoffee_Session.setMode("ace/mode/coffee");
                editorCoffee.setFontSize(12);

                editorCoffee.commands.addCommand({
                    name: 'execute',
                    bindKey: "ctrl+enter",
                    exec: function (editor) {
                        var r;
                        try {
                            var r = window.eval(editor.getCopyText() || editor.getValue());
                        } catch (e) {
                            r = e;
                        }
                        console.dir(r);
                    },
                    readOnly: true
                });


                editorCoffee.commands.addCommand({
                    name: 'togggle module list',
                    bindKey: "alt+1",
                    exec: function (editor) {
                        ;
                        if ($("#suite-list:visible").length > 0) {
                            $("#suite-list").hide();
                            $("#suite-selected").removeClass("col-md-10").addClass("col-md-12");
                        }
                        else {
                            $("#suite-list:hidden").show();
                            $("#suite-selected").removeClass("col-md-12").addClass("col-md-10");
                        }

                    },
                    readOnly: false
                });


                editorJS = ace.edit("editorJS");
                editorJS_Session = editorJS.getSession()
                editorJS_Session.setMode("ace/mode/javascript");
                editorJS.setFontSize(12);

//                editorJS_Session.on('changeScrollTop', function () {
//                    editorCoffee_Session.setScrollTop(editorJS_Session.getScrollTop())
//                });
//
//                editorCoffee_Session.on('changeScrollTop', function () {
//                    editorJS_Session.setScrollTop(editorCoffee_Session.getScrollTop())
//                });


                var toggleMode = function () {
                    if (editMode === editorCoffee) {
                        editMode = editorJS;
                    } else if (editMode === editorJS) {
                        editMode = editorCoffee;
                    }
                    schedule();
                }

                editorCoffee.on('change', function (event, editor) {
                    var focused = document.activeElement.parentElement;
                    if (focused === editorCoffee.container) {
                        editMode = editorCoffee;
                        compileToJavaScript();
                    }
                });

                editorJS.on('change', function (event, editor) {
                    var focused = document.activeElement.parentElement;
                    if (focused === editorJS.container) {
                        editMode = editorJS;
                        compileToCoffee()
                    }
                });


                var job = null;
                var schedule = function () {
                    if (job != null) {
                        clearTimeout(job);
                    }
                    return job = setTimeout(doCompile, 200);
                };

                var doCompile = function () {
                    if (editMode === editorCoffee) {
                        compileToJavaScript();
                    } else {
                        compileToCoffee();
                    }
                }

                var enableOptions = function (editors) {
                    for (var i = 0; i < editors.length; i++) {
                        var editor = editors[i];
                        editor.setTheme("ace/theme/monokai");
                        editor.tokenTooltip = new TokenTooltip(editor);
                        editor.setShowInvisibles(true);
                        editor.renderer.setShowGutter(true);
                        editor.renderer.setShowPrintMargin(false);
                    }
                };

                var disableToolTips = function () {
                    tooltip1 = editorCoffee.tokenTooltip;
                    tooltip2 = editorJS.tokenTooltip;
                    tooltip1.destroy();
                    tooltip2.destroy();
                }

                var enableToolTips = function () {
                    editorCoffee.tokenTooltip = new TokenTooltip(editorCoffee);
                    editorJS.tokenTooltip = new TokenTooltip(editorJS);
                }

                enableOptions([editorCoffee, editorJS]);

                _this.model = model;
                if (model && model.coffeeSourceStr() && model.coffeeSourceStr().length > 0) {
                    editorCoffee.getSession().getDocument().setValue(model.coffeeSourceStr().trim());
                    compileToJavaScript();
                } else {
                    editorJS.getSession().getDocument().setValue(model.jsSourceStr().trim());
                    compileToCoffee();
                }


////            // Tooltips
//                document.querySelector('#codeEditor input[name="token_highlight"]').addEventListener('click', function (e) {
//                    var value = e.target.checked;
//                    if (value === true) {
//                        enableToolTips();
//                    }
//                    if (value === false) {
//                        disableToolTips();
//                    }
//                });
//
//                // js2coffee line numbers
//                document.querySelector('#codeEditor input[name="line_numbers"]').addEventListener('click', function (e) {
//                    var value = e.target.checked;
//                    js2coffeeOptions.show_src_lineno = value;
//                    compileToCoffee();
//                });
//                // js2coffee indent
//                document.querySelector('#codeEditor select[name="js2coffee_indent"]').addEventListener('change', function (e) {
//                    var value = e.target.value;
//                    js2coffeeOptions.indent = value;
//                    compileToCoffee();
//                });
//
//                //
//                var toggleEditorSettings = function (e) {
//                    var value = e.target.checked;
//                    var name = e.target.name;
//                    if (e.target.className.indexOf("renderer") >= 0) {
//                        editorCoffee.renderer['set' + name](value);
//                        editorJS.renderer['set' + name](value);
//                    } else {
//                        editorCoffee['set' + name](value);
//                        editorJS['set' + name](value);
//                    }
//                }

            };

        })(this);
    };
    return js2coffeeEditor;
})
;
