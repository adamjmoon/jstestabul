// Generated by CoffeeScript 1.6.3
define(function(require) {
  var runner;
  runner = function(options) {
    var postCoverage, postResults;
    if (!options.withCoverage) {
      requirejs.config({
        baseUrl: "_src",
        paths: options.pathConfig.paths
      });
    } else {
      debugger;
      requirejs.config({
        baseUrl: "_instrumented/_src",
        paths: options.pathConfig.paths
      });
    }
    postResults = function(stats, callback) {
      $.post("/stats", {
        stats: JSON.stringify(stats)
      }, function() {
        if (callback) {
          callback();
        }
      });
    };
    postCoverage = function() {
      var coverage;
      if (window.__coverage__) {
        coverage = JSON.stringify(window.__coverage__.valueOf());
        $.post("/coverage", {
          coverage: coverage
        });
      }
    };
    require(["itchcork"], function(ItchCork) {
      require(options.pathConfig.bootstrap, function() {
        debugger;
        var mochaDone, mochaRunner;
        if (ItchCork.options.framework === "itchcork") {
          ItchCork.suiteView.unitTestFrameworkManager.set("itchcork");
          ItchCork.on.end = function() {
            postCoverage();
            postResults(ItchCork.stats);
          };
          ItchCork.run();
        } else if (ItchCork.options.framework === "mocha") {
          ItchCork.suiteView.unitTestFrameworkManager.set("mocha");
          mochaRunner = require('lib/testRunner/mochaRunner');
          mochaDone = function(stats) {
            var i, suite;
            postResults(stats);
            postCoverage();
            i = void 0;
            suite = void 0;
            $.get("/sourceList", function(sourceList) {
              var processSrc;
              processSrc = function(moduleName, require) {
                var ex;
                try {
                  require([moduleName], function(module) {
                    if (module && !window.__coverage__) {
                      return new ItchCork.Suite(moduleName, module);
                    }
                  });
                } catch (_error) {
                  ex = _error;
                  console.log(ex);
                }
              };
              i = 0;
              while (i < sourceList.length) {
                processSrc(sourceList[i], require);
                i++;
              }
            });
          };
          mochaRunner(ItchCork.options.specs, require, ItchCork, mochaDone);
        }
      });
    });
  };
  return runner;
});
